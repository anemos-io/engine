// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/anemos/v1alpha1/anemos.proto

/*
Package grpc_anemos_v1alpha1 is a generated protocol buffer package.

It is generated from these files:
	grpc/anemos/v1alpha1/anemos.proto

It has these top-level messages:
	TaskInstance
	Event
	TriggerRequest
	TriggerResponse
	ObserverCommandStreamRequest
	ObserverCommand
	ExecutorCommandStreamRequest
	ExecutorCommand
*/
package grpc_anemos_v1alpha1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskInstance struct {
	Provider   string            `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	Operation  string            `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	Name       string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Id         string            `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Attributes map[string]string `protobuf:"bytes,5,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Metadata   map[string]string `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskInstance) Reset()                    { *m = TaskInstance{} }
func (m *TaskInstance) String() string            { return proto.CompactTextString(m) }
func (*TaskInstance) ProtoMessage()               {}
func (*TaskInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TaskInstance) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *TaskInstance) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *TaskInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskInstance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskInstance) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *TaskInstance) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Event struct {
	Uri      string            `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Event) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type TriggerRequest struct {
}

func (m *TriggerRequest) Reset()                    { *m = TriggerRequest{} }
func (m *TriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*TriggerRequest) ProtoMessage()               {}
func (*TriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TriggerResponse struct {
}

func (m *TriggerResponse) Reset()                    { *m = TriggerResponse{} }
func (m *TriggerResponse) String() string            { return proto.CompactTextString(m) }
func (*TriggerResponse) ProtoMessage()               {}
func (*TriggerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ObserverCommandStreamRequest struct {
}

func (m *ObserverCommandStreamRequest) Reset()                    { *m = ObserverCommandStreamRequest{} }
func (m *ObserverCommandStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ObserverCommandStreamRequest) ProtoMessage()               {}
func (*ObserverCommandStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ObserverCommand struct {
}

func (m *ObserverCommand) Reset()                    { *m = ObserverCommand{} }
func (m *ObserverCommand) String() string            { return proto.CompactTextString(m) }
func (*ObserverCommand) ProtoMessage()               {}
func (*ObserverCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ExecutorCommandStreamRequest struct {
}

func (m *ExecutorCommandStreamRequest) Reset()                    { *m = ExecutorCommandStreamRequest{} }
func (m *ExecutorCommandStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutorCommandStreamRequest) ProtoMessage()               {}
func (*ExecutorCommandStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ExecutorCommand struct {
	Instance *TaskInstance `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
}

func (m *ExecutorCommand) Reset()                    { *m = ExecutorCommand{} }
func (m *ExecutorCommand) String() string            { return proto.CompactTextString(m) }
func (*ExecutorCommand) ProtoMessage()               {}
func (*ExecutorCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExecutorCommand) GetInstance() *TaskInstance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskInstance)(nil), "grpc_anemos_v1alpha1.TaskInstance")
	proto.RegisterType((*Event)(nil), "grpc_anemos_v1alpha1.Event")
	proto.RegisterType((*TriggerRequest)(nil), "grpc_anemos_v1alpha1.TriggerRequest")
	proto.RegisterType((*TriggerResponse)(nil), "grpc_anemos_v1alpha1.TriggerResponse")
	proto.RegisterType((*ObserverCommandStreamRequest)(nil), "grpc_anemos_v1alpha1.ObserverCommandStreamRequest")
	proto.RegisterType((*ObserverCommand)(nil), "grpc_anemos_v1alpha1.ObserverCommand")
	proto.RegisterType((*ExecutorCommandStreamRequest)(nil), "grpc_anemos_v1alpha1.ExecutorCommandStreamRequest")
	proto.RegisterType((*ExecutorCommand)(nil), "grpc_anemos_v1alpha1.ExecutorCommand")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := grpc.Invoke(ctx, "/grpc_anemos_v1alpha1.Scheduler/Trigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	Trigger(context.Context, *TriggerRequest) (*TriggerResponse, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_anemos_v1alpha1.Scheduler/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Trigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_anemos_v1alpha1.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trigger",
			Handler:    _Scheduler_Trigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/anemos/v1alpha1/anemos.proto",
}

// Client API for Observer service

type ObserverClient interface {
	CommandStream(ctx context.Context, in *ObserverCommandStreamRequest, opts ...grpc.CallOption) (Observer_CommandStreamClient, error)
}

type observerClient struct {
	cc *grpc.ClientConn
}

func NewObserverClient(cc *grpc.ClientConn) ObserverClient {
	return &observerClient{cc}
}

func (c *observerClient) CommandStream(ctx context.Context, in *ObserverCommandStreamRequest, opts ...grpc.CallOption) (Observer_CommandStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Observer_serviceDesc.Streams[0], c.cc, "/grpc_anemos_v1alpha1.Observer/CommandStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &observerCommandStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Observer_CommandStreamClient interface {
	Recv() (*ObserverCommand, error)
	grpc.ClientStream
}

type observerCommandStreamClient struct {
	grpc.ClientStream
}

func (x *observerCommandStreamClient) Recv() (*ObserverCommand, error) {
	m := new(ObserverCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Observer service

type ObserverServer interface {
	CommandStream(*ObserverCommandStreamRequest, Observer_CommandStreamServer) error
}

func RegisterObserverServer(s *grpc.Server, srv ObserverServer) {
	s.RegisterService(&_Observer_serviceDesc, srv)
}

func _Observer_CommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserverCommandStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObserverServer).CommandStream(m, &observerCommandStreamServer{stream})
}

type Observer_CommandStreamServer interface {
	Send(*ObserverCommand) error
	grpc.ServerStream
}

type observerCommandStreamServer struct {
	grpc.ServerStream
}

func (x *observerCommandStreamServer) Send(m *ObserverCommand) error {
	return x.ServerStream.SendMsg(m)
}

var _Observer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_anemos_v1alpha1.Observer",
	HandlerType: (*ObserverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommandStream",
			Handler:       _Observer_CommandStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/anemos/v1alpha1/anemos.proto",
}

// Client API for Executor service

type ExecutorClient interface {
	CommandStream(ctx context.Context, in *ExecutorCommandStreamRequest, opts ...grpc.CallOption) (Executor_CommandStreamClient, error)
}

type executorClient struct {
	cc *grpc.ClientConn
}

func NewExecutorClient(cc *grpc.ClientConn) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) CommandStream(ctx context.Context, in *ExecutorCommandStreamRequest, opts ...grpc.CallOption) (Executor_CommandStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Executor_serviceDesc.Streams[0], c.cc, "/grpc_anemos_v1alpha1.Executor/CommandStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorCommandStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Executor_CommandStreamClient interface {
	Recv() (*ExecutorCommand, error)
	grpc.ClientStream
}

type executorCommandStreamClient struct {
	grpc.ClientStream
}

func (x *executorCommandStreamClient) Recv() (*ExecutorCommand, error) {
	m := new(ExecutorCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Executor service

type ExecutorServer interface {
	CommandStream(*ExecutorCommandStreamRequest, Executor_CommandStreamServer) error
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_CommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutorCommandStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServer).CommandStream(m, &executorCommandStreamServer{stream})
}

type Executor_CommandStreamServer interface {
	Send(*ExecutorCommand) error
	grpc.ServerStream
}

type executorCommandStreamServer struct {
	grpc.ServerStream
}

func (x *executorCommandStreamServer) Send(m *ExecutorCommand) error {
	return x.ServerStream.SendMsg(m)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_anemos_v1alpha1.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommandStream",
			Handler:       _Executor_CommandStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/anemos/v1alpha1/anemos.proto",
}

func init() { proto.RegisterFile("grpc/anemos/v1alpha1/anemos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xf3, 0x45, 0x32, 0xa5, 0x4d, 0x19, 0x55, 0xc2, 0x8a, 0x2a, 0x54, 0x2c, 0x90, 0xca,
	0xc5, 0x6d, 0xcd, 0x85, 0x0f, 0x81, 0xd4, 0xa2, 0x1c, 0x90, 0x40, 0x80, 0xdb, 0x03, 0xe2, 0x52,
	0x6d, 0xe2, 0x51, 0xba, 0x6a, 0xbc, 0x6b, 0xd6, 0x6b, 0x8b, 0xf2, 0x13, 0xf8, 0x0f, 0xfc, 0x57,
	0xe4, 0xcd, 0xda, 0x24, 0x56, 0xdc, 0x16, 0x71, 0xf3, 0xce, 0xcc, 0x7b, 0x6f, 0xde, 0x5b, 0x6b,
	0xe1, 0xf1, 0x4c, 0x25, 0xd3, 0x43, 0x26, 0x28, 0x96, 0xe9, 0x61, 0x7e, 0xcc, 0xe6, 0xc9, 0x25,
	0x3b, 0xb6, 0x67, 0x3f, 0x51, 0x52, 0x4b, 0xdc, 0x2d, 0x46, 0x2e, 0x16, 0xa5, 0x8b, 0x72, 0xc4,
	0xfb, 0xd5, 0x86, 0xfb, 0xe7, 0x2c, 0xbd, 0x7a, 0x2f, 0x52, 0xcd, 0xc4, 0x94, 0x70, 0x04, 0xfd,
	0x44, 0xc9, 0x9c, 0x47, 0xa4, 0x5c, 0x67, 0xdf, 0x39, 0x18, 0x84, 0xd5, 0x19, 0xf7, 0x60, 0x20,
	0x13, 0x52, 0x4c, 0x73, 0x29, 0xdc, 0x96, 0x69, 0xfe, 0x2d, 0x20, 0x42, 0x47, 0xb0, 0x98, 0xdc,
	0xb6, 0x69, 0x98, 0x6f, 0xdc, 0x86, 0x16, 0x8f, 0xdc, 0x8e, 0xa9, 0xb4, 0x78, 0x84, 0x21, 0x00,
	0xd3, 0x5a, 0xf1, 0x49, 0xa6, 0x29, 0x75, 0xbb, 0xfb, 0xed, 0x83, 0xcd, 0x20, 0xf0, 0xd7, 0x6d,
	0xe6, 0x2f, 0x6f, 0xe5, 0x9f, 0x54, 0xa0, 0xb1, 0xd0, 0xea, 0x3a, 0x5c, 0x62, 0xc1, 0x0f, 0xd0,
	0x8f, 0x49, 0xb3, 0x88, 0x69, 0xe6, 0xf6, 0x0c, 0xe3, 0xd1, 0x1d, 0x18, 0x3f, 0x5a, 0xc8, 0x82,
	0xaf, 0x62, 0x18, 0xbd, 0x81, 0x61, 0x4d, 0x0c, 0x77, 0xa0, 0x7d, 0x45, 0xd7, 0x36, 0x8d, 0xe2,
	0x13, 0x77, 0xa1, 0x9b, 0xb3, 0x79, 0x46, 0x36, 0x84, 0xc5, 0xe1, 0x55, 0xeb, 0x85, 0x33, 0x7a,
	0x0d, 0x5b, 0x2b, 0xcc, 0xff, 0x02, 0xf6, 0x7e, 0x3b, 0xd0, 0x1d, 0xe7, 0x24, 0x74, 0x81, 0xca,
	0x14, 0x2f, 0x51, 0x99, 0xe2, 0x38, 0x5e, 0x72, 0xd9, 0x31, 0x2e, 0x9f, 0xad, 0x77, 0x69, 0x08,
	0x1a, 0xed, 0xfd, 0xd7, 0x7e, 0x3b, 0xb0, 0x7d, 0xae, 0xf8, 0x6c, 0x46, 0x2a, 0xa4, 0xef, 0x19,
	0xa5, 0xda, 0x7b, 0x00, 0xc3, 0xaa, 0x92, 0x26, 0x52, 0xa4, 0xe4, 0x3d, 0x82, 0xbd, 0x4f, 0x93,
	0x94, 0x54, 0x4e, 0xea, 0x9d, 0x8c, 0x63, 0x26, 0xa2, 0x33, 0xad, 0x88, 0xc5, 0x4b, 0x90, 0x5a,
	0xbf, 0x80, 0x8c, 0x7f, 0xd0, 0x34, 0xd3, 0x72, 0x3d, 0xe4, 0x0b, 0x0c, 0x6b, 0x7d, 0x7c, 0x0b,
	0x7d, 0x6e, 0xaf, 0xd2, 0xec, 0xbe, 0x19, 0x78, 0xb7, 0x5f, 0x7a, 0x58, 0x61, 0x02, 0x82, 0xc1,
	0xd9, 0xf4, 0x92, 0xa2, 0x6c, 0x4e, 0x0a, 0xbf, 0xc2, 0x3d, 0xeb, 0x02, 0x9f, 0x34, 0xb0, 0xac,
	0xd8, 0x1e, 0x3d, 0xbd, 0x65, 0xca, 0x46, 0xb1, 0x11, 0xfc, 0x84, 0x7e, 0x69, 0x16, 0x05, 0x6c,
	0xad, 0xb8, 0xc3, 0x86, 0x1f, 0xff, 0xa6, 0xf4, 0x9a, 0x94, 0xeb, 0x89, 0x6e, 0x1c, 0x39, 0x85,
	0x76, 0x99, 0xda, 0x9d, 0xb5, 0x6f, 0xba, 0x86, 0x26, 0xed, 0x1a, 0xa6, 0xd0, 0x3e, 0x7d, 0x09,
	0x0f, 0xb9, 0xf4, 0xed, 0xfb, 0x53, 0xa0, 0xfc, 0x72, 0xfc, 0xb4, 0x77, 0x62, 0xaa, 0x9f, 0x9d,
	0x6f, 0x6b, 0x5f, 0xa4, 0x49, 0xcf, 0x3c, 0x57, 0xcf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc4,
	0x44, 0xdc, 0x47, 0xd3, 0x04, 0x00, 0x00,
}
